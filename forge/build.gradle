buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        mavenCentral()
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}
apply plugin: 'org.spongepowered.mixin'

version = '1.0.8-1.19.x'
group = 'net.nu11une.wardenlootforge'
archivesBaseName = 'wardenlootforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'wardenlootforge'

            mods {
                wardenlootforge {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'wardenlootforge'

            mods {
                wardenlootforge {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'wardenlootforge'

            mods {
                wardenlootforge {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'wardenlootforge', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                wardenlootforge {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://maven.theillusivec4.top/" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.0.45'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:7.0.72")
    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:7.0.72")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19-5.1.0.2")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19-5.1.0.2:api")
    implementation fg.deobf("curse.maven:moremcmeta-442169:3827085")
}

mixin {
    add sourceSets.main, 'mixins.wardenlootforge.refmap.json'
    config 'wardenlootforge.mixins.json'

    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "wardenlootforge",
                "Specification-Vendor"    : "wardenlootforgesareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "wardenlootforgesareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
